version: '3.8'

services:
  api-service:
    build: ./api-service
    container_name: api_service
    ports:
      - "8081:3000"
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - app_network
    restart: unless-stopped

  db-service:
    build: ./db-service
    container_name: db_service
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    env_file:
      - .env
    networks:
      - app_network
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - app_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  mongodb:
    image: mongo:latest
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - app_network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    restart: unless-stopped

  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api-service
    networks:
      - app_network
    restart: unless-stopped

networks:
  app_network:

volumes:
  mongodb_data:
